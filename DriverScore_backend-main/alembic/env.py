import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from logging.config import fileConfig

from sqlalchemy import engine_from_config
from sqlalchemy import pool

from alembic import context
import subprocess
import os
from datetime import datetime
# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
from driver_score.core.database import Base
import driver_score.core.models
target_metadata = Base.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.

def include_object(object, name, type_, reflected, compare_to):
    # ignore PostGIS tables
    if type_ == "table" and name in ["spatial_ref_sys", "geography_columns", "geometry_columns"]:
        return False
    return True


def update_sql_schema_file(config):
    """
    Simple function to generate current SQL schema file.
    Just dumps the current database schema to a file.
    """

    
    # Create schema directory if it doesn't exist
    schema_dir = os.path.join(os.path.dirname(__file__), "../sql_schema")
    os.makedirs(schema_dir, exist_ok=True)
    
    # Define file path for current schema
    current_schema_file = os.path.join(schema_dir, "current_schema.sql")
    
    # Extract database name from connection URL
    db_url = config.get_main_option("sqlalchemy.url")
    db_name = db_url.split("/")[-1]
    
    # Generate header with metadata
    header = f"""-- Current database schema
-- Generated on {datetime.now().isoformat()}
-- DO NOT EDIT THIS FILE MANUALLY - It is automatically generated by Alembic

"""
    
    # Run pg_dump to get the schema
    try:
        result = subprocess.run(
            ["pg_dump", "-s", "-d", db_name],
            capture_output=True, 
            text=True
        )
        
        if result.returncode == 0:
            # Write the current schema file
            with open(current_schema_file, "w") as f:
                f.write(header)
                f.write(result.stdout)
            
            print(f"Current schema SQL updated: {current_schema_file}")
        else:
            print(f"Error generating schema SQL: {result.stderr}")
    except Exception as e:
        print(f"Failed to generate schema SQL: {str(e)}")


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.
    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        include_object=include_object,
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.
    """
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection, 
            target_metadata=target_metadata,
            include_object=include_object,
        )

        with context.begin_transaction():
            context.run_migrations()
        
        # Run post-migration hook to update SQL schema file
        if not context.is_offline_mode():
            update_sql_schema_file(config)


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()