"""Initial schema

Revision ID: a14c3ac0a4c9
Revises: 
Create Date: 2025-05-11 12:24:17.005670

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = 'a14c3ac0a4c9'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dissolved_route',
    sa.Column('dissolved_id', sa.Text(), nullable=False),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='LINESTRINGZ', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.PrimaryKeyConstraint('dissolved_id')
    )
    op.create_table('driver',
    sa.Column('driver_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('gender', sa.Text(), nullable=True),
    sa.Column('driving_history', sa.Text(), nullable=True),
    sa.Column('num_previous_accidents', sa.Text(), nullable=True),
    sa.Column('mental_health_issues', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('driver_id')
    )
    op.create_table('collected_data_file',
    sa.Column('file_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('file_name', sa.Text(), nullable=True),
    sa.Column('collected_by', sa.BigInteger(), nullable=False),
    sa.Column('collected_on', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['collected_by'], ['driver.driver_id'], ),
    sa.PrimaryKeyConstraint('file_id')
    )
    op.create_index(op.f('ix_collected_data_file_file_id'), 'collected_data_file', ['file_id'], unique=False)
    op.create_table('curve_inventory',
    sa.Column('curve_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('dissolved_id', sa.Text(), nullable=True),
    sa.Column('c_type', sa.Text(), nullable=True),
    sa.Column('c_radius', sa.Float(), nullable=True),
    sa.Column('c_devangle', sa.Float(), nullable=True),
    sa.Column('c_length', sa.Float(), nullable=True),
    sa.Column('c_pc_x', sa.Float(), nullable=True),
    sa.Column('c_pc_y', sa.Float(), nullable=True),
    sa.Column('c_pt_x', sa.Float(), nullable=True),
    sa.Column('c_pt_y', sa.Float(), nullable=True),
    sa.Column('pc_lrs', sa.Float(), nullable=True),
    sa.Column('pt_lrs', sa.Float(), nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='LINESTRING', srid=4326, dimension=3, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.ForeignKeyConstraint(['dissolved_id'], ['dissolved_route.dissolved_id'], ),
    sa.PrimaryKeyConstraint('curve_id')
    )
    op.create_table('run',
    sa.Column('run_id', sa.Text(), nullable=False),
    sa.Column('driver_id', sa.Integer(), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['driver.driver_id'], ),
    sa.PrimaryKeyConstraint('run_id')
    )
    op.create_table('upload_log',
    sa.Column('log_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('uploaded_by', sa.BigInteger(), nullable=False),
    sa.Column('uploaded_on', sa.DateTime(), nullable=True),
    sa.Column('upload_status', sa.Text(), nullable=True),
    sa.Column('log_message', sa.Text(), nullable=True),
    sa.Column('file_name', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['uploaded_by'], ['driver.driver_id'], ),
    sa.PrimaryKeyConstraint('log_id')
    )
    op.create_table('gps_sample',
    sa.Column('run_id', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('altitude', sa.Float(), nullable=True),
    sa.Column('pos_accuracy', sa.Float(), nullable=True),
    sa.Column('heading', sa.Float(), nullable=True),
    sa.Column('velocity', sa.Float(), nullable=True),
    sa.Column('vel_accuracy', sa.Float(), nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.ForeignKeyConstraint(['run_id'], ['run.run_id'], ),
    sa.PrimaryKeyConstraint('run_id', 'timestamp')
    )
    op.create_table('imu_sample',
    sa.Column('run_id', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('acceleration_x_ms2', sa.Float(), nullable=True),
    sa.Column('acceleration_y_ms2', sa.Float(), nullable=True),
    sa.Column('acceleration_z_ms2', sa.Float(), nullable=True),
    sa.Column('angular_velocity_x_rads', sa.Float(), nullable=True),
    sa.Column('angular_velocity_y_rads', sa.Float(), nullable=True),
    sa.Column('angular_velocity_z_rads', sa.Float(), nullable=True),
    sa.Column('rotation_x_sin_theta_by_2', sa.Float(), nullable=True),
    sa.Column('rotation_y_sin_theta_by_2', sa.Float(), nullable=True),
    sa.Column('rotation_z_sin_theta_by_2', sa.Float(), nullable=True),
    sa.Column('pitch_rad', sa.Float(), nullable=True),
    sa.Column('roll_rad', sa.Float(), nullable=True),
    sa.Column('yaw_rad', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['run_id'], ['run.run_id'], ),
    sa.PrimaryKeyConstraint('run_id', 'timestamp')
    )
    op.create_table('road_characteristic',
    sa.Column('run_id', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('dissolved_id', sa.Text(), nullable=True),
    sa.Column('gps_lrs', sa.Float(), nullable=True),
    sa.Column('driving_direction', sa.Text(), nullable=True),
    sa.Column('curvature', sa.Float(), nullable=True),
    sa.Column('superelevation', sa.Float(), nullable=True),
    sa.Column('grade', sa.Float(), nullable=True),
    sa.Column('intersection', sa.Boolean(), nullable=True),
    sa.Column('u_turn', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['dissolved_id'], ['dissolved_route.dissolved_id'], ),
    sa.ForeignKeyConstraint(['run_id', 'timestamp'], ['gps_sample.run_id', 'gps_sample.timestamp'], ),
    sa.PrimaryKeyConstraint('run_id', 'timestamp')
    )
    op.create_table('score',
    sa.Column('run_id', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('score', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['run_id', 'timestamp'], ['gps_sample.run_id', 'gps_sample.timestamp'], ),
    sa.PrimaryKeyConstraint('run_id', 'timestamp')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('score')
    op.drop_table('road_characteristic')
    op.drop_table('imu_sample')
    op.drop_table('gps_sample')
    op.drop_table('upload_log')
    op.drop_table('run')
    op.drop_table('curve_inventory')
    op.drop_index(op.f('ix_collected_data_file_file_id'), table_name='collected_data_file')
    op.drop_table('collected_data_file')
    op.drop_table('driver')
    op.drop_table('dissolved_route')
    # ### end Alembic commands ###
